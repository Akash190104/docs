"use strict";(self.webpackChunkdevops_extensions_docs=self.webpackChunkdevops_extensions_docs||[]).push([[5322],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),c=a,f=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7905:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),i=["components"],o={},p="EnvTransform",s={unversionedId:"extensions/env-transform/tasks/env-transform",id:"extensions/env-transform/tasks/env-transform",title:"EnvTransform",description:"---",source:"@site/docs/extensions/env-transform/tasks/env-transform.md",sourceDirName:"extensions/env-transform/tasks",slug:"/extensions/env-transform/tasks/env-transform",permalink:"/docs/extensions/env-transform/tasks/env-transform",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"envTransform",previous:{title:"Changelog",permalink:"/docs/extensions/env-transform/changelog"}},u={},m=[{value:"YAML Snippet",id:"yaml-snippet",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Examples",id:"examples",level:2},{value:"Replace - Inline",id:"replace---inline",level:3},{value:"Replace - Input File",id:"replace---input-file",level:3},{value:"Subsititue - Inline",id:"subsititue---inline",level:3}],d={toc:m};function c(e){var n=e.components,t=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"envtransform"},"EnvTransform"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"A task to perform variable replacement for environment files")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"yaml-snippet"},"YAML Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"- task: EnvTransform@0\n  inputs:\n    mode: replace #Mode to process variables for\n    inputType: file #Input source for file structure\n    content: #.env file contents. Required when `inputType = inline`\n    inputFile: .env #Input file to perform transformation on.  Required when `inputType = file`\n    outputFile: .env #File to write transformed values to\n    preserveComments: false #Preserve comments when reading and writing files\n\n")),(0,l.kt)("h2",{id:"arguments"},"Arguments"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"mode")," ",(0,l.kt)("br",null),"Mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Optional)")," Mode to process variables for ",(0,l.kt)("br",null)," Options: ",(0,l.kt)("inlineCode",{parentName:"td"},"replace"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"substitute")," ",(0,l.kt)("br",null)," Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"replace"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"inputType")," ",(0,l.kt)("br",null),"Input Mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Required)")," Input source for file structure ",(0,l.kt)("br",null)," Options: ",(0,l.kt)("inlineCode",{parentName:"td"},"file"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"inline")," ",(0,l.kt)("br",null)," Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"file"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"content")," ",(0,l.kt)("br",null),"Content"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Optional)")," .env file contents. Required when ",(0,l.kt)("inlineCode",{parentName:"td"},"inputType = inline")," ",(0,l.kt)("br",null))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"inputFile")," ",(0,l.kt)("br",null),"Input File"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Optional)")," Input file to perform transformation on. Required when ",(0,l.kt)("inlineCode",{parentName:"td"},"inputType = file")," ",(0,l.kt)("br",null)," Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},".env"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"outputFile")," ",(0,l.kt)("br",null),"Output File"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Optional)")," File to write transformed values to ",(0,l.kt)("br",null)," Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},".env"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"preserveComments")," ",(0,l.kt)("br",null),"Preserve Comments"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Optional)")," Preserve comments when reading and writing files ",(0,l.kt)("br",null))))),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"replace---inline"},"Replace - Inline"),(0,l.kt)("p",null,"Given the following pipeline configuration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"variables:\n  PROJECT_NAME: '$(Build.Repository.Name)'\n  API_URL: 'http://localhost:3000/api'\n  API_KEY: 'key-1234-ddd'\n  ENV: 'prod'\nsteps:\n  - task: EnvTransform@0\n    displayName: 'Replace values from inline content'\n    inputs:\n      inputType: 'inline'\n      content: |\n        ENV=debug\n        PROJECT_NAME=\"Local Name\"\n        #This is a comment\n\n        API_URL = http://localhost:5000/api\n        NO_REPLACE = 'some content'\n        API_KEY=none\n        #COMMENT=1\n      outputFile: '$(Build.ArtifactStagingDirectory)/.env'\n")),(0,l.kt)("p",null,"it will produce the following ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},"ENV=prod\nPROJECT_NAME=repo-name\nAPI_URL=http://localhost:3000/api\nNO_REPLACE='some content'\nAPI_KEY=key-1234-ddd\n")),(0,l.kt)("h3",{id:"replace---input-file"},"Replace - Input File"),(0,l.kt)("p",null,"Given the following pipeline configuration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"variables:\n  PROJECT_NAME: '$(Build.Repository.Name)'\n  API_URL: 'http://localhost:3000/api'\n  API_KEY: 'key-1234-ddd'\n  ENV: 'prod'\nsteps:\n  - task: EnvTransform@0\n    displayName: 'Replace values in files'\n    inputs:\n      inputType: 'file'\n      inputFile: '$(Build.SourcesDirectory)/.env.example'\n      outputFile: '$(Build.ArtifactStagingDirectory)/.env'\n")),(0,l.kt)("p",null,"where, ",(0,l.kt)("inlineCode",{parentName:"p"},".env.example")," contains the values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},"ENV=debug\nPROJECT_NAME=\"Local Name\"\n#This is a comment\n\nAPI_URL = http://localhost:5000/api\nNO_REPLACE = 'some content'\nAPI_KEY=none\n#COMMENT=1\n\n")),(0,l.kt)("p",null,"it will produce the following ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},"ENV=prod\nPROJECT_NAME=repo-name\nAPI_URL=http://localhost:3000/api\nNO_REPLACE='some content'\nAPI_KEY=key-1234-ddd\n")),(0,l.kt)("h3",{id:"subsititue---inline"},"Subsititue - Inline"),(0,l.kt)("p",null,"Given the following pipeline configuration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"variables:\n  API_URL: 'http://localhost:3000/api'\n  API_KEY: 'key-1234-ddd'\n  ENV: 'prod'\nsteps:\n  - task: EnvTransform@0\n    displayName: 'Substitute values from inline content'\n    inputs:\n      inputType: 'inline'\n      mode: 'substitute'\n      content: |\n        ENV=$(ENV)\n        PROJECT_NAME=$(Build.Repository.Name)\n        #This is a comment\n\n        API_URL = http://localhost:5000/api\n        NO_REPLACE = 'some content'\n        API_KEY=$(API_KEY)\n        #COMMENT=1\n      outputFile: '$(Build.ArtifactStagingDirectory)/.env'\n")),(0,l.kt)("p",null,"it will produce the following ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},"ENV=prod\nPROJECT_NAME=repo-name\nAPI_URL=http://localhost:5000/api\nNO_REPLACE='some content'\nAPI_KEY=key-1234-ddd\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note, ",(0,l.kt)("inlineCode",{parentName:"em"},"API_URL")," is defined in variables, but values to replace must be explicitly defined in the file itself with ",(0,l.kt)("inlineCode",{parentName:"em"},"$(VARIABLE)"))))}c.isMDXComponent=!0}}]);