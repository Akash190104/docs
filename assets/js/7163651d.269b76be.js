"use strict";(self.webpackChunkdevops_extensions_docs=self.webpackChunkdevops_extensions_docs||[]).push([[373],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(k,a(a({ref:t},u),{},{components:n})):r.createElement(k,a({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3381:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var r=n(7462),l=n(3366),i=(n(7294),n(3905)),a=["components"],o={},s="Pull Request Description",p={unversionedId:"extensions/pull-request-utils/tasks/pull-request-description",id:"extensions/pull-request-utils/tasks/pull-request-description",title:"Pull Request Description",description:"Update pull request descriptions during pipeline runs",source:"@site/docs/extensions/pull-request-utils/tasks/pull-request-description.md",sourceDirName:"extensions/pull-request-utils/tasks",slug:"/extensions/pull-request-utils/tasks/pull-request-description",permalink:"/docs/extensions/pull-request-utils/tasks/pull-request-description",tags:[],version:"current",frontMatter:{},sidebar:"pullRequestUtils",previous:{title:"Pull Request Comments",permalink:"/docs/extensions/pull-request-utils/tasks/pull-request-comments"},next:{title:"Pull Request Status",permalink:"/docs/extensions/pull-request-utils/tasks/pull-request-status"}},u=[{value:"YAML Snippet",id:"yaml-snippet",children:[],level:2},{value:"Arguments",id:"arguments",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Append content",id:"append-content",children:[],level:3},{value:"Replace content",id:"replace-content",children:[],level:3},{value:"Set as variable",id:"set-as-variable",children:[],level:3}],level:2},{value:"Other",id:"other",children:[],level:2}],d={toc:u};function c(e){var t=e.components,n=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pull-request-description"},"Pull Request Description"),(0,i.kt)("p",null,"Update pull request descriptions during pipeline runs"),(0,i.kt)("h2",{id:"yaml-snippet"},"YAML Snippet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- task: PullRequestDescription@0\n  inputs:\n    action: append #The action to perform\n    content: #The content to append or replace original description with. Required when action is `append` or `replace`. For Markdown syntax, see [Syntax guidance for basic Markdown usage](http://go.microsoft.com/fwlink/?LinkId=823918) **Supports usage of variables.**\n    useDefined: false #Use the pre-defined id for the pull request. If set, overrides the value from `System.PullRequest.PullRequestId`. Default: `false`\n    pullRequestId: $(System.PullRequest.PullRequestId) #If no id is given, the value from `System.PullRequest.PullRequestId` is taken. If a value is given, this overrides the value from `System.PullRequest.PullRequestId`\n    outputVariable: PullRequest.DescriptionContent #The name of the output variable to write the description to. Default `PullRequest.DescriptionContent`. Applies to actions `view`\n    isOutput: #If set, `outputVariable` is set as output and accessible from other jobs. Applies to actions `view`\n    stripIdentifiers: false #Strip internal modifiers before setting variable. Applies to actions `view`\n\n")),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"action")," ",(0,i.kt)("br",null),"Action"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Required)")," The action to perform ",(0,i.kt)("br",null)," Options: ",(0,i.kt)("inlineCode",{parentName:"td"},"append"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"replace"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"view")," ",(0,i.kt)("br",null)," Default value: ",(0,i.kt)("inlineCode",{parentName:"td"},"append"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"content")," ",(0,i.kt)("br",null),"Content"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Required)")," The content to append or replace original description with. Required when action is ",(0,i.kt)("inlineCode",{parentName:"td"},"append")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"replace"),". For Markdown syntax, see ",(0,i.kt)("a",{parentName:"td",href:"http://go.microsoft.com/fwlink/?LinkId=823918"},"Syntax guidance for basic Markdown usage")," ",(0,i.kt)("strong",{parentName:"td"},"Supports usage of variables.")," ",(0,i.kt)("br",null))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"useDefined")," ",(0,i.kt)("br",null),"Use defined id"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Optional)")," Use the pre-defined id for the pull request. If set, overrides the value from ",(0,i.kt)("inlineCode",{parentName:"td"},"System.PullRequest.PullRequestId"),". Default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," ",(0,i.kt)("br",null))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"pullRequestId")," ",(0,i.kt)("br",null),"Pull Request Id"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Optional)")," If no id is given, the value from ",(0,i.kt)("inlineCode",{parentName:"td"},"System.PullRequest.PullRequestId")," is taken. If a value is given, this overrides the value from ",(0,i.kt)("inlineCode",{parentName:"td"},"System.PullRequest.PullRequestId")," ",(0,i.kt)("br",null)," Default value: ",(0,i.kt)("inlineCode",{parentName:"td"},"$(System.PullRequest.PullRequestId)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"outputVariable")," ",(0,i.kt)("br",null),"Output Variable"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Optional)")," The name of the output variable to write the description to. Default ",(0,i.kt)("inlineCode",{parentName:"td"},"PullRequest.DescriptionContent"),". Applies to actions ",(0,i.kt)("inlineCode",{parentName:"td"},"view")," ",(0,i.kt)("br",null)," Default value: ",(0,i.kt)("inlineCode",{parentName:"td"},"PullRequest.DescriptionContent"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"isOutput")," ",(0,i.kt)("br",null),"Is output"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Optional)")," If set, ",(0,i.kt)("inlineCode",{parentName:"td"},"outputVariable")," is set as output and accessible from other jobs. Applies to actions ",(0,i.kt)("inlineCode",{parentName:"td"},"view")," ",(0,i.kt)("br",null))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"stripIdentifiers")," ",(0,i.kt)("br",null),"Strip Identifiers"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"(Optional)")," Strip internal modifiers before setting variable. Applies to actions ",(0,i.kt)("inlineCode",{parentName:"td"},"view")," ",(0,i.kt)("br",null))))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"append-content"},"Append content"),(0,i.kt)("p",null,"Append will append content to the end of the PR on the first run. On sequential runs the content will be replaced. A markdown comment will be added to the pull request so the task knows where to replace content from."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - task: PullRequestDescription@0\n    inputs:\n      action: 'append'\n      content: 'This content will be appended to the bottom of the PR description'\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"replace-content"},"Replace content"),(0,i.kt)("p",null,"The following configuration will replace the entire pull request description on each run."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - task: PullRequestDescription@0\n    inputs:\n      action: 'replace'\n      content: 'This content will be the only part of the PR description'\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"set-as-variable"},"Set as variable"),(0,i.kt)("p",null,"Write the content of description to a variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - task: PullRequestDescription@0\n    name: setDescriptionVariable\n    inputs:\n      action: 'view'\n      outputVariable: 'PullRequest.DescriptionContent'\n      isOutput: true\n      stripIdentifiers: false\n  - script: echo $(setDescriptionVariable.PullRequest.DescriptionContent)\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PullRequestDescription")," uses some interal modifiers to know where to append content to. If you wish to remove these before setting the variable, set ",(0,i.kt)("inlineCode",{parentName:"p"},"stripIdentifiers")," to true."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"other"},"Other"),(0,i.kt)("p",null,"Setting the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"PRU_DESC_LOG=true")," will write the old description to the log. This is mostly used during development and testing, but might be nice to know."))}c.isMDXComponent=!0}}]);