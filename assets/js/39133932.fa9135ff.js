"use strict";(self.webpackChunkdevops_extensions_docs=self.webpackChunkdevops_extensions_docs||[]).push([[9524],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(a),k=l,g=u["".concat(s,".").concat(k)]||u[k]||m[k]||i;return a?n.createElement(g,r(r({ref:t},d),{},{components:a})):n.createElement(g,r({ref:t},d))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},718:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const i={},r="GitGuardChanges",o={unversionedId:"extensions/git-guard/tasks/git-guard-changes",id:"extensions/git-guard/tasks/git-guard-changes",title:"GitGuardChanges",description:"---",source:"@site/docs/extensions/git-guard/tasks/git-guard-changes.md",sourceDirName:"extensions/git-guard/tasks",slug:"/extensions/git-guard/tasks/git-guard-changes",permalink:"/docs/extensions/git-guard/tasks/git-guard-changes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"gitGuard",previous:{title:"Changelog",permalink:"/docs/extensions/git-guard/changelog"}},s={},p=[{value:"YAML Snippet",id:"yaml-snippet",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output variables",id:"output-variables",level:3},{value:"Examples",id:"examples",level:3},{value:"Verify a single file has been changed",id:"verify-a-single-file-has-been-changed",level:2},{value:"Verify all matched files have been changed",id:"verify-all-matched-files-have-been-changed",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"gitguardchanges"},"GitGuardChanges"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Check if certain files have been changed between two commits")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"yaml-snippet"},"YAML Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"- task: GitGuardChanges@0\n  inputs:\n    sourceCommitHash: #Oldest commit hash to check from\n    targetCommitHash: HEAD #Newest commit hash to check to  (Default `HEAD`)\n    matchPattern: #Files to match\n    matchStrategy: all #If single only a `single` result from `matchPattern` needs to be matched, else all.\n    breakOnFailure: false #Break the build in addition to setting the result variables\n\n")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sourceCommitHash")," ",(0,l.kt)("br",null),"Source Commit Hash"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Required)")," Oldest commit hash to check from ",(0,l.kt)("br",null))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"targetCommitHash")," ",(0,l.kt)("br",null),"Target Commit Hash"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Required)")," Newest commit hash to check to (Default ",(0,l.kt)("inlineCode",{parentName:"td"},"HEAD"),") ",(0,l.kt)("br",null)," Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"HEAD"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"matchPattern")," ",(0,l.kt)("br",null),"Match Pattern"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Required)")," Files to match ",(0,l.kt)("br",null))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"matchStrategy")," ",(0,l.kt)("br",null),"Match Strategy"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Required)")," If single only a ",(0,l.kt)("inlineCode",{parentName:"td"},"single")," result from ",(0,l.kt)("inlineCode",{parentName:"td"},"matchPattern")," needs to be matched, else all. ",(0,l.kt)("br",null)," Options: ",(0,l.kt)("inlineCode",{parentName:"td"},"all"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"single")," ",(0,l.kt)("br",null)," Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"all"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"breakOnFailure")," ",(0,l.kt)("br",null),"Break on failure"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"(Optional)")," Break the build in addition to setting the result variables ",(0,l.kt)("br",null))))),(0,l.kt)("h3",{id:"output-variables"},"Output variables"),(0,l.kt)("p",null,"These are the output variables the task sets:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"gitGuardChangesResult"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Match result")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"gitGuardChangesCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Count of number of matched files that was changed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"gitGuardChangesMatches"),(0,l.kt)("td",{parentName:"tr",align:"left"},"List of file paths of files that was changed")))),(0,l.kt)("h1",{id:"-commit-query"},"\ud83d\udcdc Commit Query"),(0,l.kt)("p",null,'"Commit Query" allows you resolve certain git hashes dynamically. It is basically just a selector for what git commands should be run in the background.'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tag:<matchFormat>"),": Fetches the latest tag matching the format")),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Assume the repo contains two tags, ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.7-dev"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.8-dev"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.9")," the following ",(0,l.kt)("inlineCode",{parentName:"p"},"tag:v*-dev")," expression would resolve to the latest tag created. In this case ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.8-dev"),". The query ",(0,l.kt)("inlineCode",{parentName:"p"},"tag:v*[!-dev]")," would resolve ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.9"),"."),(0,l.kt)("h1",{id:"-pipeline-examples"},"\u2753 Pipeline Examples"),(0,l.kt)("h2",{id:"verify-a-single-file-has-been-changed"},"Verify a single file has been changed"),(0,l.kt)("p",null,"Assume the latest tag created is ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.7-dev")," and in the commits made after the tag was created have changed the following files."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ci/pipeline.yml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"docs/CHANGELOG.md")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"docs/README.md"))),(0,l.kt)("p",null,"Given the following pipeline configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - task: GitGuardChanges@0\n    displayName: 'Verify changelog'\n    inputs:\n      sourceCommitHash: 'tag:*-dev'\n      targetCommitHash: 'HEAD'\n      matchPattern: 'docs/CHANGELOG.md'\n      matchStrategy: 'single'\n      breakOnFailure: true\n\n")),(0,l.kt)("p",null,"assume ",(0,l.kt)("inlineCode",{parentName:"p"},"matchPattern")," will resolve the following files:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"docs/CHANGELOG.md"))),(0,l.kt)("p",null,"and the task will output:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesResult"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"true")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesCount"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesMatches"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"docs/CHANGELOG.md"))),(0,l.kt)("h2",{id:"verify-all-matched-files-have-been-changed"},"Verify all matched files have been changed"),(0,l.kt)("p",null,"Assume the latest tag created is ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.0.7-dev")," and in the commits made after the tag was created have changed the following files."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ci/pipeline.yml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"docs/CHANGELOG.md")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"docs/README.md")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-one/index.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-one/index2.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-two/index2.js"))),(0,l.kt)("p",null,"Given the following pipeline configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - task: GitGuardChanges@0\n    displayName: 'Verify changelog'\n    inputs:\n      sourceCommitHash: 'tag:*-dev'\n      targetCommitHash: 'HEAD'\n      matchPattern: '**/*/index2.js'\n      matchStrategy: 'all'\n      breakOnFailure: true\n\n")),(0,l.kt)("p",null,"assume ",(0,l.kt)("inlineCode",{parentName:"p"},"matchPattern")," will resolve the following files:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-one/index2.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-two/index2.js"))),(0,l.kt)("p",null,"and the task will output:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesResult"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"true")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesCount"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"2")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesMatches"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-one/index2.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-two/index2.js"))))),(0,l.kt)("p",null,"and assume ",(0,l.kt)("inlineCode",{parentName:"p"},"matchPattern")," will resolve the following files:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-one/index2.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-two/index2.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-three/index2.js"))),(0,l.kt)("p",null,"and the task will output:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesResult"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesCount"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"2")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gitGuardChangesMatches"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-one/index2.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"packages/package-two/index2.js"))))))}m.isMDXComponent=!0}}]);